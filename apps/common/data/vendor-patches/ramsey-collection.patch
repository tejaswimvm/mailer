diff --git a/src/AbstractArray.php b/src/AbstractArray.php
index 1c88c7e..733e021 100644
--- a/src/AbstractArray.php
+++ b/src/AbstractArray.php
@@ -57,6 +57,7 @@ abstract class AbstractArray implements ArrayInterface
      *
      * @return Traversable<T>
      */
+    #[\ReturnTypeWillChange]
     public function getIterator(): Traversable
     {
         return new ArrayIterator($this->data);
@@ -69,6 +70,7 @@ abstract class AbstractArray implements ArrayInterface
      *
      * @param array-key $offset The offset to check.
      */
+    #[\ReturnTypeWillChange]
     public function offsetExists($offset): bool
     {
         return isset($this->data[$offset]);
@@ -84,6 +86,7 @@ abstract class AbstractArray implements ArrayInterface
      * @return T|null the value stored at the offset, or null if the offset
      *     does not exist.
      */
+    #[\ReturnTypeWillChange]
     public function offsetGet($offset)
     {
         return $this->data[$offset] ?? null;
@@ -99,6 +102,7 @@ abstract class AbstractArray implements ArrayInterface
      * @param T $value The value to set at the given offset.
      */
     // phpcs:ignore SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
+    #[\ReturnTypeWillChange]
     public function offsetSet($offset, $value): void
     {
         if ($offset === null) {
@@ -115,6 +119,7 @@ abstract class AbstractArray implements ArrayInterface
      *
      * @param array-key $offset The offset to remove from the array.
      */
+    #[\ReturnTypeWillChange]
     public function offsetUnset($offset): void
     {
         unset($this->data[$offset]);
@@ -132,6 +137,19 @@ abstract class AbstractArray implements ArrayInterface
         return serialize($this->data);
     }
 
+    /**
+     * Returns data suitable for PHP serialization.
+     *
+     * @link https://www.php.net/manual/en/language.oop5.magic.php#language.oop5.magic.serialize
+     * @link https://www.php.net/serialize
+     *
+     * @return array<array-key, T>
+     */
+    public function __serialize(): array
+    {
+        return $this->data;
+    }
+
     /**
      * Converts a serialized string representation into an instance object.
      *
@@ -149,11 +167,22 @@ abstract class AbstractArray implements ArrayInterface
         $this->data = $data;
     }
 
+    /**
+     * Adds unserialized data to the object.
+     *
+     * @param array<array-key, T> $data
+     */
+    public function __unserialize(array $data): void
+    {
+        $this->data = $data;
+    }
+
     /**
      * Returns the number of items in this array.
      *
      * @link http://php.net/manual/en/countable.count.php Countable::count()
      */
+    #[\ReturnTypeWillChange]
     public function count(): int
     {
         return count($this->data);
